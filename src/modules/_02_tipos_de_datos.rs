/*
    Tipado est√°tico e forte

    Se non se indica o tipo da vble, o compilador infireo do valor otorgado.

    Tipos primitivos:
        Integer
        Floating-point
        Boolean
        Character

    Colecci√≥ns de datos:
        Tuples
        Structs
        Enums
*/

pub fn tipos_de_datos() {
    println!("\nTipos de datos en Rust:");

    /*
        Inferencia de tipos de datos:

        Cando declaramos unha vble, se
    */

    /*
        Integer:
            u para naturais
            i para enteiros
            bits: de 8 a 128
    */
    let a: u32 = 100;
    let b: i32 = -100;
    println!("n√∫mero natural: {}", a);
    println!("n√∫mero enteiro: {}", b);

    /*
        Float:
            f
            bits: 32 ou 64 (por defecto 64)

    */
    let c: f32 = 100000.0;
    println!("n√∫mero real: {}", c);

    /*
        Boolean
    */
    let flag: bool = true;
    println!("flag √© un boolean con valor: {}", flag);

    /*
        Caracteres:

            Admite caracteres √∫nicos e def√≠nense con ''
    */
    let char = 'c';
    let emoji = 'ü¶Ä';
    println!("char: {}", char);
    println!("emoji: {}", emoji);

    /*
        Cadeas en Rust (similitudes con C e C++):

            Def√≠nense con ""
            Existen dous tipos de strings:

                &str:
                    Inmutable (logo temos que conocer o seu valor en tempo de compilaci√≥n)
                    De lonxitude fixa
                    Tipo por defecto cando o compilador infiere un string
                    √â unha referencia a un segmento de memoria est√°tica (pila) que cont√©n texto

                String:
                    Mutable
                    De lonxitude vble
                    √â un array de caracteres almacenados na memoria din√°mica (heap).
    */
    let str_inmutable = "Isto √© un string inmutable";
    println!("{}", str_inmutable);

    let mut str_mutable = String::new();
    str_mutable.push_str("Isto √© un string ");
    str_mutable.push('m');
    str_mutable.push('u');
    str_mutable.push('t');
    str_mutable.push('a');
    str_mutable.push('b');
    str_mutable.push('l');
    str_mutable.push('e');
    println!("{}", str_mutable);

    /*
        Tuplas:

            Aos valores individuales dunha tupla ch√°maselles elementos
            Os elementos da tupla poden ser de distintos tipos
            As tuplas te√±en lonxitude fixa unha vez declaradas
            Non se pode engadir nin eliminar eltos dunha tupla
            O acceso os elementos faise co operador '.'
            Un uso t√≠pico das tuplas e no return dunha funci√≥n

    */
    let tupla = ("cadea", 's', 1.0, 2, false);
    println!(
        "Contido da tupla: {} {} {} {} {}",
        tupla.0, tupla.1, tupla.2, tupla.3, tupla.4
    );

    /*
        Structs:

            Similar os obxectos doutras linguaxes ou os structs de C e C++
            Aos valores individuales dun struct ch√°maselles campos
            Os campos dunha struct poden ser de distintos tipos
            A cada campo p√≥deselle dar un nome
            Para usar un struct, def√≠nese o tipo de dato de cada campo e
            d√°selle un nome o tipo de esturctura definido, despois hai que instancialo.
            Os structs non poden almacenar strings de tipo literal (&str)

            Rust define 3 tipos de structs:

                Classic C structs
                Tuple structs: a diferenza dos classic, os campos non te√±en nome
                Unit structs:

    */
    // Classic C struct
    struct Persona {
        nome: String,
        apelido: String,
        idade: u8,
    }
    let persona = Persona {
        nome: "Jose".to_string(),
        apelido: String::from("Rey"),
        idade: 40,
    };
    println!("Classic C struct:");
    println!(
        "nome: {}, apelido: {}, idade: {} anos",
        persona.nome, persona.apelido, persona.idade
    );

    // Tuple structs
    struct Cor(u32, u32, u32);
    let branco = Cor(255, 255, 255);
    println!("Tuple struct:");
    println!("Cor: {}, {}, {}", branco.0, branco.1, branco.2);

    /*
        Enums

            Cada valor dun enum ch√°mase variante
            Para acceder aos valores dunha enumeraci√≥n, usamos o operador ::
            Poden conter struts
    */
    // #[allow(dead_code)] -> para que o compilador non se queixe se non
    //                   empregamos todos os campos das nosas estruturas
    #[allow(dead_code)]
    // #[derive(Debug)] -> empr√©gase en combinaci√≥n con {:?} para amosar 
    //                  o contido dunha estrutura enum de forma lexible
    #[derive(Debug)]
    enum Dia {
        Luns,
        Martes,
        M√©rcores,
        Xoves,
        Venres,
        S√°bado,
        Domingo,
    }
    let dia = Dia::Domingo;
    println!("Hoxe √© {:?}", dia);

}
